import os
import time
from ollama import Client
from personalities import *


class TemplateGenerator:
    def __init__(self):
        # Initialize the Ollama client
        self.client = Client(host='http://ollama:11434')
        
        # Load templates and personalities
        self.load_templates()
        self.load_personalities()

    def load_templates(self):
        self.templates_empty = []
        self.templates_filled = []
        for i in range(4):  # Assuming you have 4 templates
            with open(f'/app/front_end/sick_visit_empty_template_p{i}.txt', 'r') as f:
                self.templates_empty.append(f.read())
            with open(f'/app/front_end/sick_visit_filled_template_p{i}.txt', 'r') as f:
                self.templates_filled.append(f.read())

    def load_personalities(self):
        self.personas = [personality0, personality1, personality2, personality3]
        self.check_personas = [check_persona0, check_persona1, check_persona2, check_persona3]

    def generate_filled_template(self, personality_index, user_input, temperature=0.1):
        personality = self.personas[personality_index]
        template_empty = self.templates_empty[personality_index]
        template_filled = self.templates_filled[personality_index]

        try:
            # Define the system message
            system_message = {
                'role': 'system',
                'content': personality
            }

            # Define the user messages in a logical sequence
            user_messages = [
                {
                    'role': 'user',
                    'content': "Here is an empty medical visit template that needs to be filled out based on patient information:\n\n" + template_empty
                },
                {
                    'role': 'user',
                    'content': "Here is the transcript of the medical professional and patient interaction. You will need to look at this and find the answers to the questions:\n\n" + user_input
                },
                {
                    'role': 'user',
                    'content': "Here is an example of a filled out template. THIS IS ONLY AN EXAMPLE. Do not input the data from this filled out example into the final output:\n\n" + template_filled
                },
                {
                    'role': 'user',
                    'content': "Read the transcript while looking at the empty medical template. Use the information in the transcript to fill out the template. Do not use the example filled out template directly to fill out the form."
                },
                {
                    'role': 'user',
                    'content': "Only fill out the information that is required in the empty template based on the patient's responses in the transcript. Do not add extra fields."
                },
            ]

            # Combine all messages
            messages = [system_message] + user_messages

            # Send the messages to the model
            response = self.client.chat(
                model='phi3:14b',
                messages=messages,
                options={
                    "temperature": temperature,
                    "repeat_last_n": 200,
                    "repetition_penalty": 1.3,
                    "num_predict": -2,
                    "stop": ["Extra Field:"]
                }
            )

            # Extract the filled template from the response
            filled_template = response['message']["content"].strip()
            print(f"Filled template for personality {personality_index}:\n{filled_template}")
            return filled_template

        except Exception as e:
            print(f"Error generating filled template: {e}")
            return None

    def check_outputs(self, response, personality_index, user_input, attempt=1, max_attempts=5):
        personality = self.check_personas[personality_index]
        template_empty = self.templates_empty[personality_index]

        try:
            print(f"Verification attempt {attempt}")

            # Define the system message
            system_message = {
                'role': 'system',
                'content': personality
            }

            # Define the user messages
            user_messages = [
                {
                    'role': 'user',
                    'content': "Here is the transcript of the medical professional and patient interaction:\n\n" + user_input
                },
                {
                    'role': 'user',
                    'content': "Here is the filled template that was generated by the subordinate employee:\n\n" + response
                },
                {
                    'role': 'user',
                    'content': "Here is the empty medical visit template:\n\n" + template_empty
                },
                {
                    'role': 'user',
                    'content': (
                        "Please check whether the filled template was correctly filled out. "
                        "Re-read the transcript and compare the filled template with the empty template. "
                        "If the answers in the filled template match the information in the transcript, then the template is correct. "
                        "If there are any discrepancies, please correct them and provide the updated filled template."
                    )
                },
            ]

            # Combine messages
            messages = [system_message] + user_messages

            # Send messages to the model
            verification_response = self.client.chat(
                model='phi3:14b',
                messages=messages,
                options={
                    "temperature": 0.0,
                    "repeat_last_n": 200,
                    "repetition_penalty": 1.3,
                    "num_predict": -2,
                    "stop": ["Extra Field:"]
                }
            )

            # Extract the content
            verification_content = verification_response['message']["content"].strip()
            print(f"Verified template for personality {personality_index}, attempt {attempt}:\n{verification_content}")

            # Base case: If maximum attempts reached, return the latest response
            if attempt >= max_attempts:
                return verification_content

            # For demonstration, let's assume we accept the first response
            # recursively call the function with the next attempt
            return self.check_outputs(
                response=verification_content,
                personality_index=personality_index,
                user_input=user_input,
                attempt=attempt + 1,
                max_attempts=max_attempts
            )

        except Exception as e:
            print(f"Error during verification attempt {attempt}: {e}")
            return response  # Return the last response in case of error

 
    def extract_terms(self, filled_template):
        """
        Uses the AI model to extract relevant medical terms from the filled template.
        """
        try:
            # Define the system message
            system_message = {
                'role': 'system',
                'content': 'You are a helpful assistant that extracts key medical terms from filled medical templates.'
            }

            # Define the user message
            user_message = {
                'role': 'user',
                'content': (
                    "Here is a filled medical template:\n\n"
                    f"{filled_template}\n\n"
                    "Please extract the key medical terms such as diagnoses, symptoms, procedures, and medications. "
                    "Do not extract any of the text that is before the colon (':') in each line. "
                    "Provide the terms in a comma-separated list."
                )
            }

            messages = [system_message, user_message]

            # Send messages to the model
            response = self.client.chat(
                model='phi3:14b',
                messages=messages,
                options={
                    "temperature": 0.0,
                    "repeat_last_n": 200,
                    "repetition_penalty": 1.3,
                    "num_predict": -2,
                }
            )

            # Extract the content
            extracted_terms = response['message']["content"].strip()
            

            # Process the extracted terms into a list
            terms = [term.strip() for term in extracted_terms.split(',') if term.strip()]
            return terms

        except Exception as e:
            print(f"Error extracting terms: {e}")
            return []
